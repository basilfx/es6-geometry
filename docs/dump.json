[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Circle.js",
    "memberof": null,
    "longname": "src/Circle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Point from './Point';\nimport Rectangle from './Rectangle';\n\n/**\n * Immutable circle class.\n */\nexport default class Circle {\n    /**\n     * Construct a new circle using center point `A` and radius `r`.\n     *\n     * @param {Point} a Center point `A`.\n     * @param {number} r The radius `r`.\n     * @return {void}\n     */\n    constructor(a, r) {\n        this._a = a;\n        this._r = r;\n    }\n\n    /**\n     * Get the circle center point.\n     *\n     * @return {Point} Center point.\n     */\n    get a() {\n        return this._a;\n    }\n\n    /**\n     * Get the circle center x coordinate. Shortcut for `this.a.x`.\n     *\n     * @return {number} Circle center x coordinate.\n     */\n    get x() {\n        return this._a._x;\n    }\n\n    /**\n     * Get the circle center y coordinate. Shortcut for `this.a.y`.\n     *\n     * @return {number} Circle center y coordinate.\n     */\n    get y() {\n        return this._a._y;\n    }\n\n    /**\n     * Get the circle radius.\n     *\n     * @return {number} Circle radius.\n     */\n    get r() {\n        return this._r;\n    }\n\n    /**\n     * Get the diameter. This is a shortcut for `this.r * 2`.\n     *\n     * @return {number} The circle diameter.\n     */\n    get d() {\n        return this._r * 2;\n    }\n\n    /**\n     * Convert this circle to a rectangle that contains this circle exactly.\n     *\n     * @return {Rectangle} Converted rectangle.\n     */\n    toRectangle() {\n        const a = new Point(\n            this._a._x - this.radius, this._a._y - this.radius);\n        const b = new Point(\n            this._a._x + this.radius, this._a._y + this.radius);\n\n        return new Rectangle(a, b);\n    }\n\n    /**\n     * Convert this circle into an object.\n     *\n     * @return {object} Object representation (x, y, r).\n     */\n    toObject() {\n        return {\n            x: this._a._x,\n            y: this._a._y,\n            r: this._r,\n        };\n    }\n\n    /**\n     * Convert this circle into an array.\n     *\n     * @return {Array} Array representation (x, y, r).\n     */\n    toArray() {\n        return [this._a._x, this._a._y, this._r];\n    }\n\n    /**\n     * Convert this circle into a string representation.\n     *\n     * @return {string} String representation (x, y, r).\n     */\n    toString() {\n        return `(${this._a._x}, ${this._a._y}, ${this._r})`;\n    }\n\n    /**\n     * Create a shallow copy of this instance.\n     *\n     * @return {Circle} Cloned instance.\n     */\n    clone() {\n        return new Circle(this._a, this._r);\n    }\n\n    /**\n     * Return true if this circle is equal to another circle. Two circles are\n     * equal if and only if the center point and radius are equal.\n     *\n     * @param {object} that Other instance to compare to.\n     * @return {boolean} True if both circles are equal, false otherwise.\n     */\n    equals(that) {\n        return this.constructor.name === that.constructor.name &&\n            this._a.equals(that._a) && this._r === that._r;\n    }\n\n    /**\n     * Return true if the circle is defined, finite and valid.\n     *\n     * @return {Boolean} True if the circle is fully defined, finite and valid.\n     */\n    isValid() {\n        return this._a.isValid() && typeof(this._r) === 'number' &&\n            isFinite(this._r) && this._r >= 0;\n    }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Circle",
    "memberof": "src/Circle.js",
    "longname": "src/Circle.js~Circle",
    "access": null,
    "export": true,
    "importPath": "es6-geometry/src/Circle.js",
    "importStyle": "Circle",
    "description": "Immutable circle class.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#constructor",
    "access": null,
    "description": "Construct a new circle using center point `A` and radius `r`.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Center point `A`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radius `r`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_a",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#_a",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_r",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#_r",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "a",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#a",
    "access": null,
    "description": "Get the circle center point.",
    "lineNumber": 25,
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Center point."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "x",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#x",
    "access": null,
    "description": "Get the circle center x coordinate. Shortcut for `this.a.x`.",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Circle center x coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "y",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#y",
    "access": null,
    "description": "Get the circle center y coordinate. Shortcut for `this.a.y`.",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Circle center y coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "r",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#r",
    "access": null,
    "description": "Get the circle radius.",
    "lineNumber": 52,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Circle radius."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "d",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#d",
    "access": null,
    "description": "Get the diameter. This is a shortcut for `this.r * 2`.",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The circle diameter."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toRectangle",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#toRectangle",
    "access": null,
    "description": "Convert this circle to a rectangle that contains this circle exactly.",
    "lineNumber": 70,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "Converted rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toObject",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#toObject",
    "access": null,
    "description": "Convert this circle into an object.",
    "lineNumber": 84,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object representation (x, y, r)."
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toArray",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#toArray",
    "access": null,
    "description": "Convert this circle into an array.",
    "lineNumber": 97,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array representation (x, y, r)."
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#toString",
    "access": null,
    "description": "Convert this circle into a string representation.",
    "lineNumber": 106,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation (x, y, r)."
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#clone",
    "access": null,
    "description": "Create a shallow copy of this instance.",
    "lineNumber": 115,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Circle"
      ],
      "spread": false,
      "description": "Cloned instance."
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#equals",
    "access": null,
    "description": "Return true if this circle is equal to another circle. Two circles are\nequal if and only if the center point and radius are equal.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "Other instance to compare to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if both circles are equal, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/Circle.js~Circle",
    "longname": "src/Circle.js~Circle#isValid",
    "access": null,
    "description": "Return true if the circle is defined, finite and valid.",
    "lineNumber": 136,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if the circle is fully defined, finite and valid."
    },
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Point.js",
    "memberof": null,
    "longname": "src/Point.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Vector from './Vector';\n\n/**\n * Immutable point class.\n *\n * A point is an absolute place in space, at a given x and y coordinate.\n *\n * The difference between a Point and a vector is explained in this source:\n * http://math.stackexchange.com/a/645827\n */\nexport default class Point {\n    /**\n     * Construct a new point, using a x and y coordinate.\n     *\n     * An point is immutable. All subsequent operations will return a new point\n     * instance.\n     *\n     * @param {number} x The x coordinate.\n     * @param {number} y The y coordinate.\n     * @return {void}\n     */\n    constructor(x, y) {\n        this._x = x;\n        this._y = y;\n    }\n\n    /**\n     * Create a new point from an array. The first index is considered the x\n     * coordinate, the second index is considered the y coordinate.\n     *\n     * @param {Array} array Input array with at least two values.\n     * @return {Point} Resulting point.\n     */\n    static fromArray(array) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!Array.isArray(array) || array.length < 2) {\n                throw new Error('Expected an array with at least two values.');\n            }\n        }\n\n        return new Point(array[0], array[1]);\n    }\n\n    /**\n     * Create a new point from an object. The object should have an x and y\n     * property.\n     *\n     * @param {object} object Input object with x and y property.\n     * @return {Point} Resulting point.\n     */\n    static fromObject(object) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof(object) !== 'object') {\n                throw new Error('Expected an object.');\n            }\n        }\n\n        return new Point(object.x, object.y);\n    }\n\n    /**\n     * Get the x coordinate.\n     *\n     * @return {number} The x coordinate.\n     */\n    get x() {\n        return this._x;\n    }\n\n    /**\n     * Get the y coordinate.\n     *\n     * @return {number} The y coordinate.\n     */\n    get y() {\n        return this._y;\n    }\n\n    /**\n     * Add a vector to a point.\n     *\n     * Note that addition of two points is undefined.\n     *\n     * @param {Vector} vector Vector to add to this point.\n     * @return {Point} Point with the vector added to it.\n     */\n    add(vector) {\n        if (vector instanceof Point) {\n            throw new Error('Addition of two points is undefined.');\n        }\n\n        return new Point(this._x + vector._x, this._y + vector._y);\n    }\n\n    /**\n     * Subtract a Point or a Vector.\n     *\n     * @param {Point|Vector} that Point or vector to subtract.\n     * @return {Point} If `that` is a Vector, it will return the new point.\n     * @return {Vector} If `that` is a Point, it will return the displacement.\n     */\n    subtract(that) {\n        if (that instanceof Point) {\n            return this.toVector().subtract(that);\n        }\n\n        return new Point(this._x - that._x, this._y - that._y);\n    }\n\n    /**\n     * Invert the x and y coordinate, relative to (0, 0).\n     *\n     * @return {Point} Inverted point.\n     */\n    invert() {\n        return new Point(-this._x, -this._y);\n    }\n\n    /**\n     * @return {Point}\n     */\n    multiply(scalar) {\n        return new Point(this._x * scalar, this._y * scalar);\n    }\n\n    /**\n     * @return {Point}\n     */\n    multiplyXY(scalarX, scalarY) {\n        return new Point(this._x * scalarX, this._y * scalarY);\n    }\n\n    /**\n     * @return {Point}\n     */\n    divide(scalar) {\n        return new Point(this._x / scalar, this._y / scalar);\n    }\n\n    /**\n     * @return {Point}\n     */\n    divideXY(scalarX, scalarY) {\n        return new Point(this._x / scalarX, this._y / scalarY);\n    }\n\n    /**\n     * @return {Point}\n     */\n    mix(that, amount = 0.5) {\n        return this.multiply(1 - amount).add(that.multiply(amount));\n    }\n\n    /**\n     * @return {Point}\n     */\n    perpendicular() {\n        return new Point(-this._y, this._x);\n    }\n\n    /**\n     * @return {Point}\n     */\n    snap(to) {\n        const round = (val) => Math.round(val / to) * to;\n\n        return new Point(round(this._x), round(this._y));\n    }\n\n    /**\n     * @return {number}\n     */\n    dot(that) {\n        return this._x * that._x + this._y * that._y;\n    }\n\n    /**\n     * @return {number}\n     */\n    angle() {\n        return Math.atan2(this._y, this._x);\n    }\n\n    /**\n     * @return {number}\n     */\n    angleDeg() {\n        return Math.atan2(this._y, this._x) * 180 / Math.PI;\n    }\n\n    /**\n     * @return {number}\n     */\n    slope() {\n        return this._y / this._x;\n    }\n\n    /**\n     * Calculate the squared distance between two points.\n     *\n     * If the exact distance doesn't matter, this method is slightly faster\n     * than `this.distance`.\n     *\n     * @param {Point} point The other point.\n     * @return {number} The distance between both points.\n     */\n    distanceSq(point) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(point instanceof Point)) {\n                throw new Error('Must be a point.');\n            }\n        }\n\n        const dX = (this._x - point._x);\n        const dY = (this._y - point._y);\n\n        return dX * dX + dY * dY;\n    }\n\n    /**\n     * Calculate the distance between two points.\n     *\n     * @param {Point} point The other point.\n     * @return {number} The distance between both points.\n     */\n    distance(point) {\n        return Math.sqrt(this.distanceSq(point));\n    }\n\n    /**\n     * Convert point into a vector.\n     *\n     * Note: this is an utility method. A proper conversion does not exist.\n     *\n     * @return {Vector} The point converted as vector.\n     */\n    toVector() {\n        return new Vector(this._x, this._y);\n    }\n\n    /**\n     * Convert this point into an array.\n     *\n     * @return {Array} Array representation (x, y).\n     */\n    toArray() {\n        return [this._x, this._y];\n    }\n\n    /**\n     * Convert this point into an object.\n     *\n     * @return {object} Object representation (x, y).\n     */\n    toObject() {\n        return { x: this._x, y: this._y };\n    }\n\n    /**\n     * Convert this point into a string representation.\n     *\n     * @return {string} String representation (x, y).\n     */\n    toString() {\n        return `(${this._x}, ${this._y})`;\n    }\n\n    /**\n     * Convert this point into a string representation, using a fixed number of\n     * digits for displaying.\n     *\n     * @param {number} digits Number of digits to use for representation.\n     * @return {string} String representation (x, y).\n     */\n    toFixed(digits) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof(digits) !== 'number') {\n                throw new Error('Number of digits must be a number.');\n            }\n        }\n\n        return `(${this._x.toFixed(digits)}, ${this._y.toFixed(digits)})`;\n    }\n\n    /**\n     * Create a shallow copy of this instance.\n     *\n     * @return {Point} Cloned instance.\n     */\n    clone() {\n        return new Point(this._x, this._y);\n    }\n\n    /**\n     * Return true if this point is equal to another point. Two points are\n     * equal when both x and y coordinates are equal.\n     *\n     * @param {object} that Other instance to compare to.\n     * @return {boolean} True if both points are equal, false otherwise.\n     */\n    equals(that) {\n        return this.constructor.name === that.constructor.name &&\n            this._x === that._x && this._y === that._y;\n    }\n\n    /**\n     * Return true if the point is defined and finite.\n     *\n     * @return {Boolean} True if point is fully defined and valid.\n     */\n    isValid() {\n        return typeof(this._x) === 'number' && isFinite(this._x) &&\n            typeof(this._y) === 'number' && isFinite(this._y);\n    }\n}\n"
  },
  {
    "__docId__": 18,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Point",
    "memberof": "src/Point.js",
    "longname": "src/Point.js~Point",
    "access": null,
    "export": true,
    "importPath": "es6-geometry/src/Point.js",
    "importStyle": "Point",
    "description": "Immutable point class.\n\nA point is an absolute place in space, at a given x and y coordinate.\n\nThe difference between a Point and a vector is explained in this source:\nhttp://math.stackexchange.com/a/645827",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 19,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#constructor",
    "access": null,
    "description": "Construct a new point, using a x and y coordinate.\n\nAn point is immutable. All subsequent operations will return a new point\ninstance.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_x",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#_x",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_y",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#_y",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromArray",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point.fromArray",
    "access": null,
    "description": "Create a new point from an array. The first index is considered the x\ncoordinate, the second index is considered the y coordinate.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "Input array with at least two values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Resulting point."
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromObject",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point.fromObject",
    "access": null,
    "description": "Create a new point from an object. The object should have an x and y\nproperty.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Input object with x and y property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Resulting point."
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "x",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#x",
    "access": null,
    "description": "Get the x coordinate.",
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The x coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "y",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#y",
    "access": null,
    "description": "Get the y coordinate.",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The y coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#add",
    "access": null,
    "description": "Add a vector to a point.\n\nNote that addition of two points is undefined.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": "Vector to add to this point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Point with the vector added to it."
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subtract",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#subtract",
    "access": null,
    "description": "Subtract a Point or a Vector.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point",
          "Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "Point or vector to subtract."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": "If `that` is a Point, it will return the displacement."
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "invert",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#invert",
    "access": null,
    "description": "Invert the x and y coordinate, relative to (0, 0).",
    "lineNumber": 115,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Inverted point."
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "multiply",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#multiply",
    "access": null,
    "description": "",
    "lineNumber": 122,
    "params": [
      {
        "name": "scalar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "multiplyXY",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#multiplyXY",
    "access": null,
    "description": "",
    "lineNumber": 129,
    "params": [
      {
        "name": "scalarX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scalarY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "divide",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#divide",
    "access": null,
    "description": "",
    "lineNumber": 136,
    "params": [
      {
        "name": "scalar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "divideXY",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#divideXY",
    "access": null,
    "description": "",
    "lineNumber": 143,
    "params": [
      {
        "name": "scalarX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scalarY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mix",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#mix",
    "access": null,
    "description": "",
    "lineNumber": 150,
    "params": [
      {
        "name": "that",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0.5,
        "defaultValue": "0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "perpendicular",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#perpendicular",
    "access": null,
    "description": "",
    "lineNumber": 157,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "snap",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#snap",
    "access": null,
    "description": "",
    "lineNumber": 164,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dot",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#dot",
    "access": null,
    "description": "",
    "lineNumber": 173,
    "params": [
      {
        "name": "that",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "angle",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#angle",
    "access": null,
    "description": "",
    "lineNumber": 180,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "angleDeg",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#angleDeg",
    "access": null,
    "description": "",
    "lineNumber": 187,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "slope",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#slope",
    "access": null,
    "description": "",
    "lineNumber": 194,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "distanceSq",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#distanceSq",
    "access": null,
    "description": "Calculate the squared distance between two points.\n\nIf the exact distance doesn't matter, this method is slightly faster\nthan `this.distance`.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "The other point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The distance between both points."
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "distance",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#distance",
    "access": null,
    "description": "Calculate the distance between two points.",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "The other point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The distance between both points."
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toVector",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#toVector",
    "access": null,
    "description": "Convert point into a vector.\n\nNote: this is an utility method. A proper conversion does not exist.",
    "lineNumber": 237,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": "The point converted as vector."
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toArray",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#toArray",
    "access": null,
    "description": "Convert this point into an array.",
    "lineNumber": 246,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toObject",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#toObject",
    "access": null,
    "description": "Convert this point into an object.",
    "lineNumber": 255,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#toString",
    "access": null,
    "description": "Convert this point into a string representation.",
    "lineNumber": 264,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toFixed",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#toFixed",
    "access": null,
    "description": "Convert this point into a string representation, using a fixed number of\ndigits for displaying.",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "digits",
        "description": "Number of digits to use for representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#clone",
    "access": null,
    "description": "Create a shallow copy of this instance.",
    "lineNumber": 290,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Cloned instance."
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#equals",
    "access": null,
    "description": "Return true if this point is equal to another point. Two points are\nequal when both x and y coordinates are equal.",
    "lineNumber": 301,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "Other instance to compare to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if both points are equal, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/Point.js~Point",
    "longname": "src/Point.js~Point#isValid",
    "access": null,
    "description": "Return true if the point is defined and finite.",
    "lineNumber": 311,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if point is fully defined and valid."
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Rectangle.js",
    "memberof": null,
    "longname": "src/Rectangle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Point from './Point';\nimport Vector from './Vector';\nimport Circle from './Circle';\n\n/**\n * Immutable rectangle class.\n */\nexport default class Rectangle {\n    /**\n     * Construct a new immutable rectangle of two points.\n     *\n     * @param {Point} a The `A` point..\n     * @param {Point} b The `B` point.\n     * @return {void}\n     */\n    constructor(a, b) {\n        this._a = a;\n        this._b = b;\n    }\n\n    /**\n     * Create a new rectangle from an array. The first index should be point\n     * `A` and the second index should be point `B`.\n     *\n     * @param {Array} array Input array with at least two values.\n     * @return {Rectangle} Resulting rectangle.\n     */\n    static fromArray(array) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!Array.isArray(array) || array.length < 2) {\n                throw new Error('Expected an array with at least two values.');\n            }\n        }\n\n        return new Rectangle(\n            Point.fromArray(array[0]),\n            Point.fromArray(array[1])\n        );\n    }\n\n    /**\n     * Create a new rectangle from an object. The object should have an `a` and\n     * `b` property.\n     *\n     * @param {object} object Input object with `a` and `b` property.\n     * @return {Rectangle} Resulting rectangle.\n     */\n    static fromObject(object) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof(object) !== 'object') {\n                throw new Error('Expected an object.');\n            }\n        }\n\n        return new Rectangle(\n            Point.fromObject(object.a),\n            Point.fromObject(object.b)\n        );\n    }\n\n    /**\n     * Create a new rectangle from a (client) bounding rect from an element.\n     * However, it accepts any object with a `left`, `top, `width` and `height`\n     * property.\n     *\n     * @param {object} boundingRect Input bounding rectangle.\n     * @return {Rectangle}\n     */\n    static fromBoundingRect(boundingRect) {\n        return new Rectangle(\n            new Point(boundingRect.left, boundingRect.top),\n            new Point(\n                boundingRect.left + boundingRect.width,\n                boundingRect.top + boundingRect.height\n            )\n        );\n    }\n\n    /**\n     * Return point `A`.\n     *\n     * @return {Point} Point `A`.\n     */\n    get a() {\n        return this._a;\n    }\n\n    /**\n     * Return point `B`.\n     *\n     * @return {Point} Point `B`.\n     */\n    get b() {\n        return this._b;\n    }\n\n    /**\n     * Return the left x coordinate.\n     *\n     * @return {number} Left x coordinate.\n     */\n    get left() {\n        //return Math.min(this._a._x, this._b._x);\n        return this._a._x;\n    }\n\n    /**\n     * Return the right x coordinate.\n     *\n     * @return {number} Right x coordinate.\n     */\n    get right() {\n        //return Math.max(this._a._x, this._b._x);\n        return this._b._x;\n    }\n\n    /**\n     * Return the top y coordinate.\n     *\n     * @return {number} Top y coordinate.\n     */\n    get top() {\n        //return Math.min(this._a._y, this._b._y);\n        return this._a._y;\n    }\n\n    /**\n     * Return the bottom y coordinate.\n     *\n     * @return {number} Bottom y coordinate.\n     */\n    get bottom() {\n        //return Math.max(this._a._y, this._b._y);\n        return this._b._y;\n    }\n\n    /**\n     * Return the width of this rectangle, which is the difference between\n     * `this.right` and `this.left`.\n     *\n     * @return {number} Width of the rectangle.\n     */\n    get width() {\n        return this.right - this.left;\n    }\n\n    /**\n     * Return the height of this rectangle, which is the difference between\n     * `this.bottom` and `this.top`.\n     *\n     * @return {number} Height of the rectangle.\n     */\n    get height() {\n        return this.bottom - this.top;\n    }\n\n    /**\n     * Calculate the center point of this rectangle.\n     *\n     * @return {Point} Center of this rectangle.\n     */\n    center() {\n        const x = (this._a._x + this._b._x) / 2;\n        const y = (this._a._y + this._b._y) / 2;\n\n        return new Point(x, y);\n    }\n\n    /**\n     * Calculate the center point offset.\n     *\n     * @return {Vector} Relative center point offset of this rectangle.\n     */\n    centerOffset() {\n        return this.center().subtract(this._a);\n    }\n\n    /**\n     * Merge two rectangles, taking the bouding box that contains both\n     * rectangles.\n     *\n     * @param {Rectangle} rectangle Other rectangle to merge with.\n     * @return {Rectangle} New rectangle containing both rectangles.\n     */\n    merge(rectangle) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(rectangle instanceof Rectangle)) {\n                throw new Error('Must merge with another rectangle.');\n            }\n        }\n\n        const a = new Point(\n            Math.min(this._a._x, this._b._x, rectangle._a._x, rectangle._b._x),\n            Math.min(this._a._y, this._b._y, rectangle._a._y, rectangle._b._y)\n        );\n        const b = new Point(\n            Math.max(this._a._x, this._b._x, rectangle._a._x, rectangle._b._x),\n            Math.max(this._a._y, this._b._y, rectangle._a._y, rectangle._b._y)\n        );\n\n        return new Rectangle(a, b);\n    }\n\n    /**\n     * Move the rectangle by applying an offset to the points `a` and `b`.\n     *\n     * @param {Vector} vector Offset vector.\n     * @return {Rectangle} Moved rectangle.\n     */\n    move(vector) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(vector instanceof Vector)) {\n                throw new Error('Offset must be a vector.');\n            }\n        }\n\n        return new Rectangle(this._a.add(vector), this._b.add(vector));\n    }\n\n    /**\n     * Move the `a` point and `b` point of this rectangle individually.\n     *\n     * @param {Vector} vectorA Offset vector for `a` point.\n     * @param {Vector} vectorB Offset vector for `b` point.\n     * @return {Rectangle} Moved rectangle.\n     */\n    moveAB(vectorA, vectorB) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(vectorA instanceof Vector) || !(vectorB instanceof Vector)) {\n                throw new Error('Offset must be a vector.');\n            }\n        }\n\n        return new Rectangle(this._a.add(vectorA), this._b.add(vectorB));\n    }\n\n    /**\n     * Similar to move, but moves `a` and `b` in opposite directions by\n     * inverting the vector for `a`.\n     *\n     * This method may shrink the rectangle if the vector is negative, or if\n     * points `a` and `b` have been swapped. Normalize the\n     *\n     * @param {Vector} vector The offset vector to expand with.\n     * @return {Rectangle} Expanded rectangle.\n     */\n    expand(vector) {\n        return this.moveAB(vector.invert(), vector);\n    }\n\n    /**\n     * Returns true if a given point is on this rectangle.\n     *\n     * @param {Point} point Point to test with.\n     * @return {boolean} True if point is within rectangle.\n     */\n    containsPoint(point) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(point instanceof Point)) {\n                throw new Error('Must be a point.');\n            }\n        }\n\n        return (\n            (point._x >= this._a._x && point._x <= this._b._x) ||\n            (point._x >= this._b._x && point._x <= this._a._x)\n        ) && (\n            (point._y >= this._a._y && point._y <= this._b._y) ||\n            (point._y >= this._b._y && point._y <= this._a._y)\n        );\n    }\n\n    /**\n     * Returns true if a given rectangle is within this rectangle. That is,\n     * both point `A` and `B` are within this rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle to check for.\n     * @return {booleam} True if the rectangle is within this rectangle.\n     */\n    containsRectangle(rectangle) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(rectangle instanceof Rectangle)) {\n                throw new Error('Must be a rectangle.');\n            }\n        }\n\n        return this.containsPoint(rectangle.a) &&\n            this.containsPoint(rectangle.b);\n    }\n\n    /**\n     * Returns true if a given rectangle collides with this rectangle.\n     *\n     * @param {Rectangle} rectangle Other rectangle to compare with.\n     * @return {boolean} True if the given rectangle collides with this one.\n     */\n    collidesRectangle(rectangle) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(rectangle instanceof Rectangle)) {\n                throw new Error('Must be a rectangle.');\n            }\n        }\n\n        return (this._a._x < rectangle._b._x && this._b._x > rectangle._a._x &&\n            this._a._y < rectangle._b._y && this._b._y > rectangle._a._y);\n    }\n\n    /**\n     * Returns true if a given circle collides with this rectangle.\n     *\n     * @param {Circle} circle Other circle to compare with.\n     * @return {boolean} True if the given circles collides with this one.\n     */\n    collidesCircle(circle) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(circle instanceof Circle)) {\n                throw new Error('Must be a circle.');\n            }\n        }\n\n        const clamp = (value, min, max) => Math.max(min, Math.min(max, value));\n\n        const closest = new Point(\n            clamp(circle._a._x, this._a._x, this._b._x),\n            clamp(circle._a._y, this._a._y, this._b._y)\n        );\n\n        return closest.distanceSq(circle._a) < (circle._r * circle._r);\n    }\n\n    /**\n     * Calculate the area of the given rectangle.\n     *\n     * @return {number} The rectangle area.\n     */\n    area() {\n        return (this._b._x - this._a._x) * (this._b._y - this._a._y);\n    }\n\n    /**\n     * Return an array representation of this instance.\n     *\n     * @return {Array} Array representation ([a, b]).\n     */\n    toArray() {\n        return [this._a.toArray(), this._b.toArray()];\n    }\n\n    /**\n     * Return an object representation of this instance.\n     *\n     * @return {object} Object representation (a, b).\n     */\n    toObject() {\n        return {\n            a: this._a.toObject(),\n            b: this._b.toObject(),\n        };\n    }\n\n    /**\n     * Return a string representation of this rectangle.\n     *\n     * @return {string} String representation.\n     */\n    toString() {\n        return `(${this._a.toString()}, ${this._b.toString()})`;\n    }\n\n    /**\n     * Create a shallow copy of this instance.\n     *\n     * @return {Rectangle} Cloned instance.\n     */\n    clone() {\n        return new Rectangle(this._a, this._b);\n    }\n\n    /**\n     * Return a normalize rectangle, with the `A` point in the top-left\n     * position and the `B` point in the bottom-right position.\n     *\n     * @return {Rectangle} The normalized rectangle.\n     */\n    normalize() {\n        return new Rectangle(\n            new Point(this.left, this.top),\n            new Point(this.right, this.bottom)\n        );\n    }\n\n    /**\n     * Return true if this rectangle is equal to another rectangle. Two\n     * rectangles are equal if and only if both points are equal. This means\n     * if two rectangles have the same left, right, top and bottom, they\n     * may not be equal, becaus they can be defined from different points.\n     *\n     * @param {object} that Other instance to compare to.\n     * @return {boolean} True if both rectangles are equal, false otherwise.\n     */\n    equals(that) {\n        return this.constructor.name === that.constructor.name &&\n            this._a.equals(that._b) && this._b.equals(that._b);\n    }\n\n    /**\n     * Return true if the rectangle is defined and finite.\n     *\n     * @return {Boolean} True if rectangle is valid.\n     */\n    isValid() {\n        return this._a.isValid() && this._b.isValid();\n    }\n}\n"
  },
  {
    "__docId__": 51,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Rectangle",
    "memberof": "src/Rectangle.js",
    "longname": "src/Rectangle.js~Rectangle",
    "access": null,
    "export": true,
    "importPath": "es6-geometry/src/Rectangle.js",
    "importStyle": "Rectangle",
    "description": "Immutable rectangle class.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#constructor",
    "access": null,
    "description": "Construct a new immutable rectangle of two points.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The `A` point.."
      },
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The `B` point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_a",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#_a",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_b",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#_b",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromArray",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle.fromArray",
    "access": null,
    "description": "Create a new rectangle from an array. The first index should be point\n`A` and the second index should be point `B`.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "Input array with at least two values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "Resulting rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromObject",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle.fromObject",
    "access": null,
    "description": "Create a new rectangle from an object. The object should have an `a` and\n`b` property.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Input object with `a` and `b` property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "Resulting rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromBoundingRect",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle.fromBoundingRect",
    "access": null,
    "description": "Create a new rectangle from a (client) bounding rect from an element.\nHowever, it accepts any object with a `left`, `top, `width` and `height`\nproperty.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "boundingRect",
        "description": "Input bounding rectangle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "a",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#a",
    "access": null,
    "description": "Return point `A`.",
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Point `A`."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "b",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#b",
    "access": null,
    "description": "Return point `B`.",
    "lineNumber": 93,
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Point `B`."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "left",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#left",
    "access": null,
    "description": "Return the left x coordinate.",
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Left x coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "right",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#right",
    "access": null,
    "description": "Return the right x coordinate.",
    "lineNumber": 112,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Right x coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "top",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#top",
    "access": null,
    "description": "Return the top y coordinate.",
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Top y coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "bottom",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#bottom",
    "access": null,
    "description": "Return the bottom y coordinate.",
    "lineNumber": 132,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Bottom y coordinate."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#width",
    "access": null,
    "description": "Return the width of this rectangle, which is the difference between\n`this.right` and `this.left`.",
    "lineNumber": 143,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Width of the rectangle."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#height",
    "access": null,
    "description": "Return the height of this rectangle, which is the difference between\n`this.bottom` and `this.top`.",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Height of the rectangle."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "center",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#center",
    "access": null,
    "description": "Calculate the center point of this rectangle.",
    "lineNumber": 162,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "Center of this rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "centerOffset",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#centerOffset",
    "access": null,
    "description": "Calculate the center point offset.",
    "lineNumber": 174,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": "Relative center point offset of this rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "merge",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#merge",
    "access": null,
    "description": "Merge two rectangles, taking the bouding box that contains both\nrectangles.",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "Rectangle"
        ],
        "spread": false,
        "optional": false,
        "name": "rectangle",
        "description": "Other rectangle to merge with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "New rectangle containing both rectangles."
    },
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#move",
    "access": null,
    "description": "Move the rectangle by applying an offset to the points `a` and `b`.",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": "Offset vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "Moved rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveAB",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#moveAB",
    "access": null,
    "description": "Move the `a` point and `b` point of this rectangle individually.",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "vectorA",
        "description": "Offset vector for `a` point."
      },
      {
        "nullable": null,
        "types": [
          "Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "vectorB",
        "description": "Offset vector for `b` point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "Moved rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "expand",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#expand",
    "access": null,
    "description": "Similar to move, but moves `a` and `b` in opposite directions by\ninverting the vector for `a`.\n\nThis method may shrink the rectangle if the vector is negative, or if\npoints `a` and `b` have been swapped. Normalize the",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": "The offset vector to expand with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "Expanded rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsPoint",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#containsPoint",
    "access": null,
    "description": "Returns true if a given point is on this rectangle.",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "Point to test with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if point is within rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsRectangle",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#containsRectangle",
    "access": null,
    "description": "Returns true if a given rectangle is within this rectangle. That is,\nboth point `A` and `B` are within this rectangle.",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "Rectangle"
        ],
        "spread": false,
        "optional": false,
        "name": "rectangle",
        "description": "The rectangle to check for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "booleam"
      ],
      "spread": false,
      "description": "True if the rectangle is within this rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collidesRectangle",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#collidesRectangle",
    "access": null,
    "description": "Returns true if a given rectangle collides with this rectangle.",
    "lineNumber": 297,
    "params": [
      {
        "nullable": null,
        "types": [
          "Rectangle"
        ],
        "spread": false,
        "optional": false,
        "name": "rectangle",
        "description": "Other rectangle to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the given rectangle collides with this one."
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collidesCircle",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#collidesCircle",
    "access": null,
    "description": "Returns true if a given circle collides with this rectangle.",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "Circle"
        ],
        "spread": false,
        "optional": false,
        "name": "circle",
        "description": "Other circle to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the given circles collides with this one."
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "area",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#area",
    "access": null,
    "description": "Calculate the area of the given rectangle.",
    "lineNumber": 336,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The rectangle area."
    },
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toArray",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#toArray",
    "access": null,
    "description": "Return an array representation of this instance.",
    "lineNumber": 345,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array representation ([a, b])."
    },
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toObject",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#toObject",
    "access": null,
    "description": "Return an object representation of this instance.",
    "lineNumber": 354,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object representation (a, b)."
    },
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#toString",
    "access": null,
    "description": "Return a string representation of this rectangle.",
    "lineNumber": 366,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation."
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#clone",
    "access": null,
    "description": "Create a shallow copy of this instance.",
    "lineNumber": 375,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "Cloned instance."
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "normalize",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#normalize",
    "access": null,
    "description": "Return a normalize rectangle, with the `A` point in the top-left\nposition and the `B` point in the bottom-right position.",
    "lineNumber": 385,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Rectangle"
      ],
      "spread": false,
      "description": "The normalized rectangle."
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#equals",
    "access": null,
    "description": "Return true if this rectangle is equal to another rectangle. Two\nrectangles are equal if and only if both points are equal. This means\nif two rectangles have the same left, right, top and bottom, they\nmay not be equal, becaus they can be defined from different points.",
    "lineNumber": 401,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "Other instance to compare to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if both rectangles are equal, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/Rectangle.js~Rectangle",
    "longname": "src/Rectangle.js~Rectangle#isValid",
    "access": null,
    "description": "Return true if the rectangle is defined and finite.",
    "lineNumber": 411,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if rectangle is valid."
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Vector.js",
    "memberof": null,
    "longname": "src/Vector.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Point from './Point';\n\n/**\n * Immutable vector class.\n *\n * A vector represents a displacement, using a x an y component to represent\n * the length (magnitude) and direction.\n *\n * The difference between a Vector and a Point is explained in this source:\n * http://math.stackexchange.com/a/645827\n */\nexport default class Vector {\n    /**\n     * Definition of the unit vector.\n     */\n    static Unit = new Vector(1, 1);\n\n    /**\n     * Construct a new vector, using a x and y component to represent the\n     * length (magnitude) and direction relative to (0, 0).\n     *\n     * An vector is immutable. All subsequent operations will return a new\n     * vector instance.\n     *\n     * @param {number} x The x component.\n     * @param {number} y The y component.\n     * @return {void}\n     */\n    constructor(x, y) {\n        this._x = x;\n        this._y = y;\n    }\n\n    /**\n     * Create a new vector from an array. The first index is considered the x\n     * component, the second index is considered the y component.\n     *\n     * @param {Array} array Input array with at least two values.\n     * @return {Vector} Resulting vector.\n     */\n    static fromArray(array) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!Array.isArray(array) || array.length < 2) {\n                throw new Error('Expected an array with at least two values.');\n            }\n        }\n\n        return new Vector(array[0], array[1]);\n    }\n\n    /**\n     * Create a new vector from an object. The object should have an x and y\n     * property.\n     *\n     * @param {object} object Input object with x and y property.\n     * @return {Vector} Resulting vector.\n     */\n    static fromObject(object) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof(object) !== 'object') {\n                throw new Error('Expected an object.');\n            }\n        }\n\n        return new Vector(object.x, object.y);\n    }\n\n    /**\n     * Create a new vector form a single value. In that case, both the x and y\n     * property will have the same value.\n     *\n     * @param {number} number Input number for x and y property.\n     * @return {Vector} Resulting vector.\n     */\n    static fromNumber(number) {\n        return new Vector(number, number);\n    }\n\n    /**\n     * Get the x component.\n     *\n     * @return {number} The x component.\n     */\n    get x() {\n        return this._x;\n    }\n\n    /**\n     * Get the y component.\n     *\n     * @return {number} The y component.\n     */\n    get y() {\n        return this._y;\n    }\n\n    /**\n     * Add another vector or point to this vector.\n     *\n     * If the input is a point, the result will be a point with this vector\n     * as offset.\n     *\n     * @param {Point|Vector} that Point or vector to add.\n     * @return {Point|Vector} New Vector if adding vector, point otherwise.\n     */\n    add(that) {\n        if (that instanceof Point) {\n            return that.add(this);\n        }\n\n        return new Vector(this._x + that._x, this._y + that._y);\n    }\n\n    /**\n     * Subtract a given scalar from the `x` and `y` component of this vector.\n     *\n     * @param {number} that Scalar value to subtract.\n     * @return {Vector}\n     */\n    subtract(that) {\n        return new Vector(this._x - that._x, this._y - that._y);\n    }\n\n    /**\n     * Invert a vector, returning a copy with inverted magnitude and direction.\n     *\n     * @return {Vector}\n     */\n    invert() {\n        return new Vector(-this._x, -this._y);\n    }\n\n    /**\n     * @return {Vector}\n     */\n    multiply(scalar) {\n        return new Vector(this._x * scalar, this._y * scalar);\n    }\n\n    /**\n     * @return {Vector}\n     */\n    multiplyXY(scalarX, scalarY) {\n        return new Vector(this._x * scalarX, this._y * scalarY);\n    }\n\n    /**\n     * @return {Vector}\n     */\n    divide(scalar) {\n        return new Vector(this._x / scalar, this._y / scalar);\n    }\n\n    /**\n     * @return {Vector}\n     */\n    divideXY(scalarX, scalarY) {\n        return new Vector(this._x / scalarX, this._y / scalarY);\n    }\n\n    /**\n     * @return {Vector}\n     */\n    mix(that, amount = 0.5) {\n        return this.multiply(1 - amount).add(that.multiply(amount));\n    }\n\n    /**\n     * @return {Vector}\n     */\n    perpendicular() {\n        return new Vector(-this._y, this._x);\n    }\n\n    /**\n     * @return {Vector}\n     */\n    snap(to) {\n        const round = (val) => Math.round(val / to) * to;\n\n        return new Vector(round(this._x), round(this._y));\n    }\n\n    /**\n     * @return {number}\n     */\n    dot(that) {\n        return this._x * that._x + this._y * that._y;\n    }\n\n    /**\n     * @return {number}\n     */\n    angle() {\n        return Math.atan2(this._y, this._x);\n    }\n\n    /**\n     * @return {number}\n     */\n    angleDeg() {\n        return Math.atan2(this._y, this._x) * 180 / Math.PI;\n    }\n\n    /**\n     * @return {number}\n     */\n    slope() {\n        return this._y / this._x;\n    }\n\n    /**\n     * Calculate the squared length of this vector.\n     *\n     * If the exact length doesn't matter, this method is slightly faster\n     * than `this.length`.\n     *\n     * @return {number} The squared length of this vector.\n     */\n    lengthSq() {\n        return this._x * this._x + this._y * this._y;\n    }\n\n    /**\n     * Calculate the length (magnitude) of the vector.\n     *\n     * @return {number} The length of the vector.\n     */\n    length() {\n        return Math.sqrt(this.lengthSq());\n    }\n\n    /**\n     * [minLength description]\n     * @param {[type]} length [description]\n     * @return {[type]}\n     */\n    minLength(length) {\n        return this.length() < length ? this.normalize(length) : this;\n    }\n\n    maxLength(length) {\n        return this.length() > length ? this.normalize(length) : this;\n    }\n\n    normalize(scalar = 1) {\n        return this.divide(this.length()).multiply(scalar);\n    }\n\n    projectOnto(that) {\n        return that.multiply(this.dot(that) / that.lengthSq());\n    }\n\n    /**\n     * Convert vector into a point.\n     *\n     * Note: this is an utility method. A proper conversion does not exist.\n     *\n     * @return {Point} The vector converted as point.\n     */\n    toPoint() {\n        return new Point(this._x, this._y);\n    }\n\n    /**\n     * Convert this vector into an array.\n     *\n     * @return {Array} Array representation (x, y).\n     */\n    toArray() {\n        return [this._x, this._y];\n    }\n\n    /**\n     * Convert this vector into an object.\n     *\n     * @return {object} Object representation (x, y).\n     */\n    toObject() {\n        return { x: this._x, y: this._y };\n    }\n\n    /**\n     * Convert this vector into a string representation.\n     *\n     * @return {string} String representation (x, y).\n     */\n    toString() {\n        return `(${this._x}, ${this._y})`;\n    }\n\n    /**\n     * Convert this vector into a string representation, using a fixed number\n     * of digits for displaying.\n     *\n     * @param {number} digits Number of digits to use for representation.\n     * @return {string} String representation (x, y).\n     */\n    toFixed(digits) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof(digits) !== 'number') {\n                throw new Error('Number of digits must be a number.');\n            }\n        }\n\n        return `(${this._x.toFixed(digits)}, ${this._y.toFixed(digits)})`;\n    }\n\n    /**\n     * Create a shallow copy of this instance.\n     *\n     * @return {Vector} Cloned instance.\n     */\n    clone() {\n        return new Vector(this._x, this._y);\n    }\n\n    /**\n     * Return true if this vector is equal to another vector. Two vectors are\n     * equal when both x and y components are equal.\n     *\n     * @param {object} that Other instance to compare to.\n     * @return {boolean} True if both points are equal, false otherwise.\n     */\n    equals(that) {\n        return this.constructor.name === that.constructor.name &&\n            this._x === that._x && this._y === that._y;\n    }\n\n    /**\n     * Return true if the vector is defined and finite.\n     *\n     * @return {Boolean} True if vector is fully defined and valid.\n     */\n    isValid() {\n        return typeof(this._x) === 'number' && isFinite(this._x) &&\n            typeof(this._y) === 'number' && isFinite(this._y);\n    }\n}\n"
  },
  {
    "__docId__": 85,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Vector",
    "memberof": "src/Vector.js",
    "longname": "src/Vector.js~Vector",
    "access": null,
    "export": true,
    "importPath": "es6-geometry/src/Vector.js",
    "importStyle": "Vector",
    "description": "Immutable vector class.\n\nA vector represents a displacement, using a x an y component to represent\nthe length (magnitude) and direction.\n\nThe difference between a Vector and a Point is explained in this source:\nhttp://math.stackexchange.com/a/645827",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#constructor",
    "access": null,
    "description": "Construct a new vector, using a x and y component to represent the\nlength (magnitude) and direction relative to (0, 0).\n\nAn vector is immutable. All subsequent operations will return a new\nvector instance.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x component."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y component."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_x",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#_x",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_y",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#_y",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromArray",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector.fromArray",
    "access": null,
    "description": "Create a new vector from an array. The first index is considered the x\ncomponent, the second index is considered the y component.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "Input array with at least two values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": "Resulting vector."
    },
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromObject",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector.fromObject",
    "access": null,
    "description": "Create a new vector from an object. The object should have an x and y\nproperty.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Input object with x and y property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": "Resulting vector."
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromNumber",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector.fromNumber",
    "access": null,
    "description": "Create a new vector form a single value. In that case, both the x and y\nproperty will have the same value.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Input number for x and y property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": "Resulting vector."
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "x",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#x",
    "access": null,
    "description": "Get the x component.",
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The x component."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "y",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#y",
    "access": null,
    "description": "Get the y component.",
    "lineNumber": 93,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The y component."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#add",
    "access": null,
    "description": "Add another vector or point to this vector.\n\nIf the input is a point, the result will be a point with this vector\nas offset.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point",
          "Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "Point or vector to add."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Point",
        "Vector"
      ],
      "spread": false,
      "description": "New Vector if adding vector, point otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subtract",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#subtract",
    "access": null,
    "description": "Subtract a given scalar from the `x` and `y` component of this vector.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "Scalar value to subtract."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "invert",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#invert",
    "access": null,
    "description": "Invert a vector, returning a copy with inverted magnitude and direction.",
    "lineNumber": 129,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "multiply",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#multiply",
    "access": null,
    "description": "",
    "lineNumber": 136,
    "params": [
      {
        "name": "scalar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "multiplyXY",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#multiplyXY",
    "access": null,
    "description": "",
    "lineNumber": 143,
    "params": [
      {
        "name": "scalarX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scalarY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "divide",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#divide",
    "access": null,
    "description": "",
    "lineNumber": 150,
    "params": [
      {
        "name": "scalar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "divideXY",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#divideXY",
    "access": null,
    "description": "",
    "lineNumber": 157,
    "params": [
      {
        "name": "scalarX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scalarY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mix",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#mix",
    "access": null,
    "description": "",
    "lineNumber": 164,
    "params": [
      {
        "name": "that",
        "types": [
          "*"
        ]
      },
      {
        "name": "amount",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0.5,
        "defaultValue": "0.5"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "perpendicular",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#perpendicular",
    "access": null,
    "description": "",
    "lineNumber": 171,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "snap",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#snap",
    "access": null,
    "description": "",
    "lineNumber": 178,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dot",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#dot",
    "access": null,
    "description": "",
    "lineNumber": 187,
    "params": [
      {
        "name": "that",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "angle",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#angle",
    "access": null,
    "description": "",
    "lineNumber": 194,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "angleDeg",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#angleDeg",
    "access": null,
    "description": "",
    "lineNumber": 201,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "slope",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#slope",
    "access": null,
    "description": "",
    "lineNumber": 208,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lengthSq",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#lengthSq",
    "access": null,
    "description": "Calculate the squared length of this vector.\n\nIf the exact length doesn't matter, this method is slightly faster\nthan `this.length`.",
    "lineNumber": 220,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The squared length of this vector."
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "length",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#length",
    "access": null,
    "description": "Calculate the length (magnitude) of the vector.",
    "lineNumber": 229,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The length of the vector."
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "minLength",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#minLength",
    "access": null,
    "description": "[minLength description]",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "maxLength",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#maxLength",
    "access": null,
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "normalize",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#normalize",
    "access": null,
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "params": [
      {
        "name": "scalar",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "projectOnto",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#projectOnto",
    "access": null,
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [
      {
        "name": "that",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toPoint",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#toPoint",
    "access": null,
    "description": "Convert vector into a point.\n\nNote: this is an utility method. A proper conversion does not exist.",
    "lineNumber": 261,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": "The vector converted as point."
    },
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toArray",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#toArray",
    "access": null,
    "description": "Convert this vector into an array.",
    "lineNumber": 270,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toObject",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#toObject",
    "access": null,
    "description": "Convert this vector into an object.",
    "lineNumber": 279,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Object representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#toString",
    "access": null,
    "description": "Convert this vector into a string representation.",
    "lineNumber": 288,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toFixed",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#toFixed",
    "access": null,
    "description": "Convert this vector into a string representation, using a fixed number\nof digits for displaying.",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "digits",
        "description": "Number of digits to use for representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String representation (x, y)."
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#clone",
    "access": null,
    "description": "Create a shallow copy of this instance.",
    "lineNumber": 314,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Vector"
      ],
      "spread": false,
      "description": "Cloned instance."
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#equals",
    "access": null,
    "description": "Return true if this vector is equal to another vector. Two vectors are\nequal when both x and y components are equal.",
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "Other instance to compare to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if both points are equal, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/Vector.js~Vector",
    "longname": "src/Vector.js~Vector#isValid",
    "access": null,
    "description": "Return true if the vector is defined and finite.",
    "lineNumber": 335,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if vector is fully defined and valid."
    },
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Circle from './Circle';\nimport Point from './Point';\nimport Rectangle from './Rectangle';\nimport Vector from './Vector';\n\nexport {\n    Circle, Point, Rectangle, Vector,\n};\n"
  },
  {
    "__docId__": 124,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]